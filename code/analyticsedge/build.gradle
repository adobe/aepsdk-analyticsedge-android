apply plugin: 'com.android.library'
apply plugin: "jacoco"
apply plugin: "com.jfrog.bintray"

ext {
    srcFolders = file("./").listFiles().findAll {
        !it.isFile() && !it.name.startsWith("gradle") && !it.name.startsWith("test")
    }.collect { "./" + it.name + "/src/main/java" }
}

jacoco {
    toolVersion = rootProject.ext.jacocoVersion
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion


    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0-beta-2"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    flavorDimensions "target"
    productFlavors{
        phone {
            dimension "target"
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }
}

android.libraryVariants.all { variant ->
    tasks.withType(Javadoc) {
        source = [android.sourceSets.main.java.sourceFiles, android.sourceSets.phone.java.sourceFiles]
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"

        doFirst{classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)}

        exclude "**/BuildConfig.java"
        exclude "**/R.java"
        options {
            links "https://developer.android.com/reference"
        }
    }
}

task javadocInternal(type: Javadoc) {
    destinationDir = reporting.file("javadocInternal")
    options.memberLevel = JavadocMemberLevel.PRIVATE
}

task javadocPublic(type: Javadoc) {
    destinationDir = reporting.file("javadocPublic")
    options.memberLevel = JavadocMemberLevel.PUBLIC
}

task javadocPublish(type: Jar) {
    from javadocPublic
    archiveClassifier.set('javadoc')
}

artifactoryPublish.dependsOn('assemblePhone')
publishing {
    publications {
        aar(MavenPublication) {
            groupId = 'com.adobe.marketing.mobile'
            artifactId = rootProject.moduleName
            version = rootProject.moduleVersion
            artifact("$buildDir/outputs/aar/${moduleAARName}")
            artifact javadocPublish
            pom.withXml {
                asNode().appendNode('name', mavenRepoName)
                asNode().appendNode('description', mavenRepoDescription)
                asNode().appendNode('url', 'https://aep-sdks.gitbook.io/docs/')
                def scmNode = asNode().appendNode('scm')
                scmNode.appendNode('url', 'https://github.com/Adobe-Marketing-Cloud/acp-sdks/')


                def developersNode = asNode().appendNode('developers')
                def developerNode = developersNode.appendNode('developer')
                developerNode.appendNode('id', 'adobe')
                developerNode.appendNode('name', 'adobe')

                def licensesNode = asNode().appendNode('licenses')
                def licenseNode = licensesNode.appendNode('license')
                licenseNode.appendNode('name', 'Adobe Proprietary')

                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each

                def coreDependencyNode = dependenciesNode.appendNode('dependency')
                coreDependencyNode.appendNode('groupId', 'com.adobe.marketing.mobile')
                coreDependencyNode.appendNode('artifactId', 'core')
                coreDependencyNode.appendNode('version', mavenCoreVersion)

                def edgeDependencyNode = dependenciesNode.appendNode('dependency')
                edgeDependencyNode.appendNode('groupId', 'com.adobe.marketing.mobile')
                edgeDependencyNode.appendNode('artifactId', 'edge')
                edgeDependencyNode.appendNode('version', mavenEdgeVersion)
            }
        }
        aarSnapshot(MavenPublication) {
            groupId = 'com.adobe.marketing.mobile'
            artifactId = rootProject.moduleName
            if (project.hasProperty("isMaster")) {
                version = rootProject.moduleVersion + '-internal'
            } else {
                version = rootProject.moduleVersion + '-SNAPSHOT'
            }
            artifact("$buildDir/outputs/aar/${moduleAARName}")
            artifact javadocPublish
            pom.withXml {
                asNode().appendNode('name', mavenRepoName)
                asNode().appendNode('description', mavenRepoDescription)
                asNode().appendNode('url', 'https://aep-sdks.gitbook.io/docs/')
                def scmNode = asNode().appendNode('scm')
                scmNode.appendNode('url', 'https://github.com/Adobe-Marketing-Cloud/acp-sdks/')


                def developersNode = asNode().appendNode('developers')
                def developerNode = developersNode.appendNode('developer')
                developerNode.appendNode('id', 'adobe')
                developerNode.appendNode('name', 'adobe')

                def licensesNode = asNode().appendNode('licenses')
                def licenseNode = licensesNode.appendNode('license')
                licenseNode.appendNode('name', 'Adobe Proprietary')

                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each

                def coreDependencyNode = dependenciesNode.appendNode('dependency')
                coreDependencyNode.appendNode('groupId', 'com.adobe.marketing.mobile')
                coreDependencyNode.appendNode('artifactId', 'core')
                coreDependencyNode.appendNode('version', mavenCoreVersion + '-SNAPSHOT')

                def edgeDependencyNode = dependenciesNode.appendNode('dependency')
                edgeDependencyNode.appendNode('groupId', 'com.adobe.marketing.mobile')
                edgeDependencyNode.appendNode('artifactId', 'edge')
                edgeDependencyNode.appendNode('version', mavenEdgeVersion + '-SNAPSHOT')
            }
        }
    }
}
artifactoryPublish {
    publications(publishing.publications.aarSnapshot)
}

bintray {
    user = 'sdkci'
    //This apiKey is passed as a gradle parameter to the task
    //from the Jenkins Pipeline.
    if (project.hasProperty("apiKey")) {
        key = "$apiKey"
    } else {
        key = "xxxxxxxxxxxxxxx"
    }

    String gpgpass = "xxxxxxxxxxxxxxx"
    if (project.hasProperty("gpgPassphrase")) {
        gpgpass = "$gpgPassphrase"
    }
    dryRun = false
    pkg {
        repo = "mobileservicesdk"
        name = mavenRepoName
        userOrg = "eaps"
        version {
            name = rootProject.moduleVersion
            desc = mavenRepoDescription
            gpg {
                sign = true
                passphrase = gpgpass
            }
        }
    }

    publications = ['aar']
}

bintrayUpload.dependsOn('assemblePhone')

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.adobe.marketing.mobile:core:${rootProject.mavenCoreVersion}"
    testImplementation 'junit:junit:4.13'
    testImplementation "org.mockito:mockito-core:2.28.2"
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.0'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.0'
    testImplementation 'org.json:json:20180130'
    implementation 'com.adobe.marketing.mobile:edge:1.0.0-beta-1'
}

afterEvaluate {
    generatePhoneReleaseBuildConfig.enabled = false
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
    }
}

task platformUnitTestJacocoReport(type: JacocoReport, dependsOn: "testPhoneDebugUnitTest") {
    def excludeRegex = ['**/ADB*.class']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes/com/adobe/marketing/mobile", excludes: excludeRegex)

    additionalClassDirs.setFrom files([debugTree])
    additionalSourceDirs.setFrom files(android.sourceSets.main.java.sourceFiles)
    sourceDirectories.setFrom files(android.sourceSets.phone.java.sourceFiles)
    executionData "$buildDir/jacoco/testPhoneDebugUnitTest.exec"

    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}
